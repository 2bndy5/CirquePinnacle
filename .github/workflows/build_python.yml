name: Python

on:
  pull_request_target:
  workflow_dispatch:
  release:
    types: [published]
  pull_request:
    types: [opened, reopened]
    paths:
      - "src/*.h"
      - "src/*.cpp"
      - "src/CMakeLists.txt"
      - "src/cmake/**"
      - "src/utility/CMakeLists.txt"
      - "src/utility/linux_kernel/*"
      - ".github/workflows/build_python.yml"
  push:
    paths:
      - "src/*.h"
      - "src/*.cpp"
      - "src/CMakeLists.txt"
      - "src/cmake/**"
      - "src/utility/CMakeLists.txt"
      - "src/utility/linux_kernel/*"
      - ".github/workflows/build_python.yml"

jobs:
  check_source:
    runs-on: windows-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Checkout Current Repo
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      
      - name: Create source distribution
        run: python setup.py sdist

      - name: Install mypy, pylint, twine, and lib stubs
        run: pip install mypy pylint twine .

      - name: Type-check stubs and examples
        run: mypy src/cirque_pinnacle-stubs examples/cpython

      - name: Lint examples
        shell: bash
        run: pylint examples/cpython/*.py

      - name: Checks distributable with twine
        shell: bash
        run: twine check dist/*

      - name: Save distributable source as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "cirque_pinnacle-sdist"
          path: ${{ github.workspace }}/dist

  build_linux:
    runs-on: ubuntu-latest
    needs: [check_source]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Checkout Current Repo
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Fetch distributable source artifact
        uses: actions/download-artifact@v3
        with:
          name: "cirque_pinnacle-sdist"
          path: ${{ github.workspace }}/sdist

      - name: Try install from source distributable
        run: pip install sdist/*.tar.gz -v

      - name: Install dependencies
        run: |
          sudo apt-get install python3-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install twine

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: aarch64

      - name: Build binary wheels with cibuildwheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_ARCHS_LINUX: aarch64 native
          CIBW_SKIP: cp36* pp* *musllinux*

      - name: Move cross-compiled wheels to dist folder
        run: |
          mkdir -p dist
          mv ./wheelhouse/*.whl ${{ github.workspace }}/dist/

      - name: checks distributable with twine
        run: python3 -m twine check dist/*

      - name: Save distributable wheels as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "cirque_pinnacle-bdist"
          path: ${{ github.workspace }}/dist

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [check_source, build_linux]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Fetch distributable wheel artifacts
        uses: actions/download-artifact@v3
        with:
          name: "cirque_pinnacle-bdist"
          path: ${{ github.workspace }}/dist

      - name: Fetch distributable source artifact
        uses: actions/download-artifact@v3
        with:
          name: "cirque_pinnacle-sdist"
          path: ${{ github.workspace }}/dist

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install twine

      - name: Publish package (to TestPyPI)
        if: github.event_name == 'workflow_dispatch'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: twine upload --repository testpypi dist/*

      - name: Publish to PyPi
        # only upload distributions to PyPi when triggered by a published release
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
        run: twine upload dist/*
