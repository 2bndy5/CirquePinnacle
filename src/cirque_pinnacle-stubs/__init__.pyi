# Copyright (c) 2023 Brendan Doherty (2bndy5)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
from typing import List, overload

PINNACLE_SW_DR: int = ...

class PinnacleDataMode:
    @property
    def value(self) -> int: ...

PINNACLE_RELATIVE: PinnacleDataMode
PINNACLE_ANYMEAS: PinnacleDataMode
PINNACLE_ABSOLUTE: PinnacleDataMode
PINNACLE_ERROR: PinnacleDataMode

class PinnacleAnyMeasGain:
    @property
    def value(self) -> int: ...

PINNACLE_GAIN_100: PinnacleAnyMeasGain
PINNACLE_GAIN_133: PinnacleAnyMeasGain
PINNACLE_GAIN_166: PinnacleAnyMeasGain
PINNACLE_GAIN_200: PinnacleAnyMeasGain

class PinnacleAnyMeasFreq:
    @property
    def value(self) -> int: ...

PINNACLE_FREQ_0: PinnacleAnyMeasFreq
PINNACLE_FREQ_1: PinnacleAnyMeasFreq
PINNACLE_FREQ_2: PinnacleAnyMeasFreq
PINNACLE_FREQ_3: PinnacleAnyMeasFreq
PINNACLE_FREQ_4: PinnacleAnyMeasFreq
PINNACLE_FREQ_5: PinnacleAnyMeasFreq
PINNACLE_FREQ_6: PinnacleAnyMeasFreq
PINNACLE_FREQ_7: PinnacleAnyMeasFreq

class PinnacleAnyMeasMuxing:
    @property
    def value(self) -> int: ...

PINNACLE_MUX_NPN: PinnacleAnyMeasMuxing
PINNACLE_MUX_PNP: PinnacleAnyMeasMuxing
PINNACLE_MUX_REF0: PinnacleAnyMeasMuxing
PINNACLE_MUX_REF1: PinnacleAnyMeasMuxing

class PinnacleAnyMeasCtrl:
    @property
    def value(self) -> int: ...

PINNACLE_CRTL_PWR_IDLE: PinnacleAnyMeasCtrl
PINNACLE_CRTL_REPEAT: PinnacleAnyMeasCtrl

class RelativeReport:
    def __init__(self):
        self.buttons: int = ...
        self.x: int = ...
        self.y: int = ...
        self.scroll: int = ...
    @property
    def buffer(self) -> bytes: ...

class AbsoluteReport:
    def __init__(self):
        self.buttons: int = ...
        self.x: int = ...
        self.y: int = ...
        self.z: int = ...

class PinnacleTouch:
    def __init__(self, data_ready_pin: int) -> None: ...
    @property
    def data_mode(self) -> PinnacleDataMode: ...
    @data_mode.setter
    def data_mode(self, value: PinnacleDataMode) -> None: ...
    def getDataMode(self) -> PinnacleDataMode: ...
    def setDataMode(self, value: PinnacleDataMode) -> None: ...
    @property
    def feed_enable(self) -> bool: ...
    @feed_enable.setter
    def feed_enable(self, value: bool) -> None: ...
    def feedEnabled(self, value: bool) -> None: ...
    def isFeedEnabled(self) -> bool: ...
    @property
    def is_hard_configured(self) -> bool: ...
    def isHardConfigured(self) -> bool: ...
    def available(self) -> bool: ...
    def absolute_mode_config(
        self, z_idle_count: int = 30, invert_x: bool = False, invert_y: bool = False
    ) -> None: ...
    def absoluteModeConfig(
        self, z_idle_count: int = 30, invert_x: bool = False, invert_y: bool = False
    ) -> None: ...
    def relative_mode_config(
        self,
        taps: bool = True,
        rotate90: bool = False,
        secondary_tap: bool = True,
        glide_extend: bool = True,
        intellimouse: bool = False,
    ) -> None: ...
    def relativeModeConfig(
        self,
        taps: bool = True,
        rotate90: bool = False,
        secondary_tap: bool = True,
        glide_extend: bool = True,
        intellimouse: bool = False,
    ) -> None: ...
    @overload
    def read(self, report: AbsoluteReport, read_buttons: bool = True) -> None: ...
    @overload
    def read(self, report: RelativeReport, read_buttons: bool = True) -> None: ...
    def clear_status_flags(self) -> None: ...
    def clearStatusFlags(self) -> None: ...
    @property
    def allow_sleep(self) -> bool: ...
    @allow_sleep.setter
    def allow_sleep(self, value: bool) -> None: ...
    def allowSleep(self, value: bool) -> None: ...
    def isAllowSleep(self) -> bool: ...
    @property
    def shutdown(self) -> bool: ...
    @shutdown.setter
    def shutdown(self, value: bool) -> None: ...
    @property
    def sample_rate(self) -> int: ...
    @sample_rate.setter
    def sample_rate(self, value: int) -> None: ...
    def getSampleRate(self) -> int: ...
    def setSampleRate(self, value: int) -> None: ...
    def detect_finger_stylus(
        self,
        enable_finger: bool = True,
        enable_stylus: bool = True,
        sample_rate: int = 100,
    ) -> None: ...
    def detectFingerStylus(
        self,
        enable_finger: bool = True,
        enable_stylus: bool = True,
        sample_rate: int = 100,
    ) -> None: ...
    def calibrate(
        self,
        run: bool = True,
        tap: bool = True,
        track_error: bool = True,
        nerd: bool = True,
        background: bool = True,
    ) -> bool: ...
    @property
    def calibration_matrix(self) -> List[int]: ...
    @calibration_matrix.setter
    def calibration_matrix(self, buffer: List[int]) -> None: ...
    def getCalibrationMatrix(self) -> List[int]: ...
    def setCalibrationMatrix(self, matrix: List[int]) -> None: ...
    def set_adc_gain(self, sensitivity: int) -> None: ...
    def setAdcGain(self, sensitivity: int) -> None: ...
    def tune_edge_sensitivity(
        self, x_axis_z_wide_min: int = 4, y_axis_z_wide_min: int = 3
    ) -> None: ...
    def tuneEdgeSensitivity(
        self, x_axis_z_wide_min: int = 4, y_axis_z_wide_min: int = 3
    ) -> None: ...
    def anymeas_mode_config(
        self,
        gain: int = 0,
        frequency: int = 2,
        sample_length: int = 512,
        mux_control: int = 4,
        aperture_width: int = 500,
        control_power_count: int = 1,
    ) -> None: ...
    def anymeasModeConfig(
        self,
        gain: int = 0,
        frequency: int = 2,
        sample_length: int = 512,
        mux_control: int = 4,
        aperture_width: int = 500,
        control_power_count: int = 1,
    ) -> None: ...
    def measure_adc(self, bits_to_toggle: int, toggle_polarity: int) -> int: ...
    def measureAdc(self, bits_to_toggle: int, toggle_polarity: int) -> int: ...
    def start_measure_adc(self, bits_to_toggle: int, toggle_polarity: int) -> None: ...
    def startMeasureAdc(self, bits_to_toggle: int, toggle_polarity: int) -> None: ...
    def get_measure_adc(self) -> int: ...
    def getMeasureAdc(self) -> int: ...

class PinnacleTouchSPI(PinnacleTouch):
    def __init__(self, data_ready_pin: int, slave_select: int) -> None: ...
    def begin(self) -> bool: ...

class TwoWire:
    def __init__(self) -> None: ...
    def begin(self, busNumber: int = 1) -> None: ...
    def end(self) -> None: ...
    def beginTransmission(self, address: int) -> None: ...
    def endTransmission(self) -> int: ...
    def write(self, data: int) -> int: ...
    def requestFrom(self, register: int, quantity: int, sendStop: int) -> int: ...
    def available(self) -> int: ...
    def read(self) -> int: ...

class PinnacleTouchI2C(PinnacleTouch):
    def __init__(self, data_ready_pin: int, slave_address: int = 0x2A) -> None: ...
    @overload
    def begin(self) -> bool: ...
    @overload
    def begin(self, i2C_bus: TwoWire) -> bool: ...
